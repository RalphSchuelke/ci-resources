<?xml version="1.0" encoding="utf-8"?>

<!-- NuGet requires license model to be declared -->
<!--
Variables to set for usage:

- CopyrightHolder
- CompanyName

- Description, if set, will be set as package description.

- This file assumes the inclusion of GitVersion.MsBuild package into the parent project.
  It should still work okay without it, but this has not been tested.

- License is set to MIT by default but can be overridden by passing $(License).
- If UsePs is set to any value other than an empty string, Powershell will be added to tag list.

- If UseProjectUrl is set to something, this value will be used as a project url reference.

- To comply with nuget gallery requirements;
* there must be a README.md in the project root
* there must be an icon.png file in the project root
These will be set as readme and identifying graphics respectively.

- If DoNotSign is set to true, we will not attempt to sign *nupkg packages.
- If DoNotSign is not set to true then NuGetSignatureThumb must be set
  to the thumbprint of a VALID codesigning certificate.
  This certificate must exist in the standard certstore on the BUILD host.
  We may in the future include an option to pass a PFX file
  but this has further implications, in particular, protecting the private key contained
  inside.
  
- Digicert timestamp service is used to countersign signatures.

- UsePrivateProps may be set to true to enable inclusion of a file named vs.private.props.
This file is intended to hold private information, such as private keys for nuget signing.

-->
<Project>
  <PropertyGroup Condition="$(APPVEYOR_REPO_PROVIDER) == gitHub">
        <PackageProjectUrl>https://github.com/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_PROJECT_NAME)</PackageProjectUrl>
  </PropertyGroup>
  <PropertyGroup>
    <CopyrightHolder Condition="$(CopyrightHolder)==''">$(APPVEYOR_REPO_COMMIT_AUTHOR)</CopyrightHolder>
    <ProjectTop>$([MSBuild]::NormalizeDirectory('$(MSBuildThisFileDirectory)','..'))</ProjectTop>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <UpdateVersionProperties>true</UpdateVersionProperties>
    <GenerateSatelliteAssembliesForCore>true</GenerateSatelliteAssembliesForCore>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
  <!--  <PackageOutputPath>$([MSBuild]::NormalizeDirectory($(ProjectTop),'NuPkgPool'))</PackageOutputPath> -->
    <Copyright>Â© 2017 - 2025 $(CopyrightHolder))</Copyright>
    <Description>
      $(Description)

      This is a JPMF package.
    </Description>
    <!--    <PackageId>$(MSBuildProjectName)</PackageId> -->
    <Authors>$(APPVEYOR_REPO_COMMIT_AUTHOR)</Authors>
    <Company>$(CompanyName)</Company>
    <PackageProjectUrl Condition="$(UseProjectUrl)!=''">$(UseProjectUrl)</PackageProjectUrl>
    <PackageLicenseExpression Condition="$(License)==''">MIT</PackageLicenseExpression>
    <PackageLicenseExpression Condition="$(License)!=''">$(License)</PackageLicenseExpression>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>$(PackageProjectUrl)</RepositoryUrl>
    <PackageTags>$(PackageTags) $(MSBuildProjectName) JPMF</PackageTags>
    <PackageReleaseNotes>(n/a)</PackageReleaseNotes>
    <!-- configure Source link -->
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <TimestampServiceURL Condition="$(TimestampServiceURL)==''">http://timestamp.digicert.com</TimestampServiceURL>
    <EnablePackageValidation>true</EnablePackageValidation>

  </PropertyGroup>

  <ItemGroup>
    <!--
	Note: This particular item group is evaluated before PackageVersion and company get refreshed
	by gitversion tasks. -->

    <PackagesToCopy Include="
			     $(PackageOutputPath)/$(PackageId)-$(PackageVersion).nupkg;
			     $(PackageOutputPath)/$(PackageId)-$(PackageVersion).snupkg" />
  </ItemGroup>

  <PropertyGroup Condition="'$(UsePs)' != '' ">
    <PackageTags>$(PackageTags) PowerShell</PackageTags>
  </PropertyGroup>
  <Target Condition="!Exists('$(SolutionDir)README.md')" Name="SetupReadme" BeforeTargets="Compile" >
    <!--
	<Copy
	ContinueOnError="WarnAndContinue"
	SourceFiles="$(ProjectTop)/README.md"
	DestinationFolder="$(SolutionDir)"
	/>
    -->
  </Target>
  <Target Name="PreDeployNuPkg" BeforeTargets="Pack" DependsOnTargets="GetVersion">
    <Message Importance="High" Text="Preparing to deploy nupkg and snupkg for" />
    <Message Importance="High" Text="$(PackageId) - $(GitVersion_InformationalVersion)" />
  </Target>

  <Target AfterTargets="Pack" Name="DeployNuPkgBinaries"  Condition="$(DoNotSign)!=true" DependsOnTargets="GetVersion">
    <!-- <Message Text="Processing: %(PackagesToCopy.Identity)" Importance="High" /> -->
    <Exec Command="dotnet nuget sign &quot;$([System.IO.Path]::Combine('$(PackageOutputPath)', '$(PackageId).$(GitVersion_SemVer)')).nupkg&quot;  --certificate-fingerprint $(NuGetSignatureThumb) --timestamper $(TimestampServiceURL)" ContinueOnError="WarnAndContinue" />
    <Exec Command="dotnet nuget sign &quot;$([System.IO.Path]::Combine('$(PackageOutputPath)', '$(PackageId).$(GitVersion_SemVer)')).snupkg&quot; --certificate-fingerprint $(NuGetSignatureThumb) --timestamper $(TimestampServiceURL)" ContinueOnError="WarnAndContinue" />
  </Target>
  <ItemGroup>
    <None Include="$(ProjectTop)/icon.png"  Pack="true" PackagePath="" />
    <None Include="$(ProjectTop)/README.md" Pack="true" PackagePath="" />
  </ItemGroup>
  <!--
      When preleasetag is set but prereleaselabel is not, we get a faulty version string and build fails because of it.
      So, if that happens, we tag the build as alpha.
  -->
  <PropertyGroup Condition="$(GitVersion_PrereleaseTag)!='' And $(GitVersion_PrereleaseLabel)==''">
    <PackageVersion>$(GitVersion_MajorMinorPatch)-alpha.$(GitVersion_PrereleaseTag).$(GitVersion_WeightedPrereleaseNumber)</PackageVersion>
  </PropertyGroup>

  <PropertyGroup>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageIcon>icon.png</PackageIcon>
  </PropertyGroup>
  <!--
      Import local information not intended to leave the machine, or no point to it if they do
      This requires UsePrivateProps to be set to true at the moment.
      May be updated to include if the file exists instead (though obviously this may cause problems).
  -->
  <Import Project="$(ProjectTop)/vs.private.props" Condition="$(UsePrivateProps) == true" />
</Project>
